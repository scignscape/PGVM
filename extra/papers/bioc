Hi: I am the editor of the International Journal of Speech Technology
 and a co-author or co-editor of two forthcoming biomedical volumes;
 myself and one other author are writing an Elsevier book concerning
 Covid-19, and I am editing a volume on "Medical Image Processing and
 Machine Learning".  We have been studying the different formats
 available for describing lab and "in silico" protocols, and we're
 particularly interested in how BioCoder is designed.  It would be
 great to see this approach generalized and made available outside of
 just biomedical experiments.  Indeed, we'd like to propose a library
 that would enable programmers to create BioCoder-style standards for
 different scientific disciplines.  Here's an overview of what we have
 in mind:
 
 1)  We're working on translating the BioCode itself to a modern C++
 (more than C) programming style.  For example, use Qt and/or STL
 containers instead of C arrays, and for filesystem operations.  This
 approach makes it easier to use BioCoder in conjunction with other C++
 libraries for PDF, LaTeX, graph visualization, application networking,
 and so forth.
 
 2)  Use templates and abstract base classes to define an interface for
 constructing BioCoder-style workflow classes.  Apart from concrete
 protocols, there can also be "protocol models" which reflect different
 investigative modalities --- e.g., protocols for Machine Learning need
 a different vocabulary than protocols for lab experiments.  Existing
 BioCoder global functions could be mapped to class methods in this
 more general framework, so e.g. "start_protocol(...)" would become
 "dspin.start_protocol(...)" ("DSPIN" refers to our own protocol model
 for image analysis).
 
 3)  Integrate protocol models with publishing software.  For instance,
 BioCoder's description generators could be extended to output LaTeX as
 well as HTML.  Moreover, each step in the concrete represented
 protocol could be assigned a unique identifier that could be used to
 create a unique LaTeX label.  This would allow locations in the text
 of publications associated with the research work to be annotated with
 links to the protocol description.  Readers could then cross-reference
 between the main publication text and supplemental materials (perhaps
 in the form of appendices) containing a structured protocol
 description.  We have implemented a custom PDF viewer along with
 custom LaTeX generators to create PDF files embedded with metadata
 consumed by this PDF application, and we're planning on linking
 BioCoder-style libraries as an extra layer of LaTeX functionality
 along these lines.
 
 4)  Extend the graph functionality.  Currently we're working on
 porting the graph code to a Qt-compatible version which can help users
 visualize the runtime graph, and  provides a convenient interface for
 manipulating the graph structure with modern C++.  This also opens the
 possibility of saving protocols in a graph database.  Insofar as
 protocol models can be tailored to different scientific fields,
 different protocols would also call for different semantics for
 runtime graphs --- that is, different property/edge schemata as would
 be modeled by a graph database, with edge and node-property
 annotations defined according to discipline-specific terminology.
 
 5)  Establish a framework for aligning protocol models with
 standardized workflow vocabularies and "minimum information"
 checklists, like MIBBI.  For runtime graphs, such ontologies could
 provide the domain of values for edge and node-property annotations.
 For protocol-description code, the individual methods/functions for a
 protocol model could be decorated with annotations asserting that a
 particular function notates a research step which has a particular
 label in an MIBBI (or similar) recommendation.  One could, for
 instance, maintain a dictionary of links between C++ function/method
 pointers and label names formalized in an MIBBI-style controlled
 vocabulary.
 
 6)  Use protocols as executable workflows for "in silico" modalities.
 On the image analysis side, we're adopting the "Pantheon" Image
 Processing Objectives ontology, which was developed alongside Pandore,
 a suite of image-processing utilities that can be combined into
 workflows.  Rather then use Pantheon as a static markup format, we're
 trying to consolidate the Pantheon terminology into a collection of
 C++ methods (called "D-SPIN" -- "Data Structure Protocol for
 Image-Analysis Networking") based on the BioCoder example.  D-SPIN
 code can generate text descriptions of imaging protocols, but it can
 also execute image-analysis pipelines directly, by calling Pandore
 analytic functions (what they call "operators").  So this is one
 example of where BioCoder-style protocols can be used for direct
 workflow implementations, not just summarizes of experimental
 processes.
 
 All of the technology I've mentioned here will be incorporated into
 data sets for the two volumes I mentioned at the top, with a primary
 focus on bioimaging and image-processing.  So our current focus is on
 bioimaging.  But I wanted to reach out to you and see if you had
 thoughts on how we could generalize the BioCoder paradigm more
 broadly.
